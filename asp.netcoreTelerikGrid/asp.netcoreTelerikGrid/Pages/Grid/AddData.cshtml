@page
@model asp.netcoreTelerikGrid.Pages.Grid.AddDataModel
@{
}

<h1>GridCrudOperations</h1>

@using asp.netcoreTelerikGrid.Models
@using Kendo.Mvc.UI

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()

@(Html.Kendo().Grid<ProductViewModel>().Name("grid")
                .Groupable()
                .Sortable()
                .Editable()
                .Scrollable()
                .ToolBar(x =>
                {
                    x.Create();
                    x.Excel();
                })
                .Columns(columns =>
                {
                    columns.Bound(column => column.Name);
                    columns.Bound(column => column.Created_at).Format("{0:dd MMMM yyyy}");
                    columns.Bound(column => column.price);
                    columns.Bound(column => column.Description);
                    
                    columns.Command(column =>
                    {
                        column.Edit();
                        column.Destroy();
                    });
                })
                 .Excel(excel => excel
                            .FileName("Export.xlsx")
                            .Filterable(true)
                            .ProxyURL("/Grid/GridCrudOperations?handler=Save")
                        )
                .DataSource(ds => ds.Ajax()
                       .Read(r => r.Url("/Grid/AddData?handler=Read").Data("forgeryToken"))
                       .Update(u => u.Url("/Grid/AddData?handler=Update").Data("forgeryToken"))
                       .Create(c => c.Url("/Grid/AddData?handler=Create").Data("forgeryToken"))
                       .Destroy(d => d.Url("/Grid/AddData?handler=Destroy").Data("forgeryToken"))
                       .Model(m =>
                       {
                           m.Id(id => id.Id);
                           m.Field(f => f.Id).Editable(false);
                       })
                       .Events(events => events.Error("grid_error")) // Handle the "error" event.
                    .PageSize(10)
                )
                .Pageable()
)

<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }
    function grid_error(e) {
        var errors = e.errors;
        if (errors) {
            var grid = $("#grid").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
                $.each(errors, function (key, value) {
                    var message = "";
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                    // As long as the key matches the field name, this line of code will be displayed as validation message in the popup.
                    grid.editable.element.find("[data-valmsg-for='" + key + "']").replaceWith('<div class="k-tooltip k-tooltip-error k-validator-tooltip k-invalid-msg field-validation-error" ><span class="k-tooltip-icon k-icon k-i-warning"></span><span class="k-tooltip-content">' + message + '</span><span class="k-callout k-callout-n"></span></div>').show();
                });
            });
        }
    }
</script>
